language: generic

services:
  - docker

before_install:
  - docker build -t fedorapython/fedora-python-tox:$TRAVIS_CPU_ARCH .
  - docker images

script:
  # Test project in local folder mounted as a volume into Docker container
  - docker run --rm -v $PWD/example_project:/src -w /src -e TOXENV fedorapython/fedora-python-tox:$TRAVIS_CPU_ARCH
  # Test project cloned into Docker container from provided GIT URL
  - docker run --rm -e TOXENV -e GIT_URL=https://github.com/frenzymadness/python-tox-example.git fedorapython/fedora-python-tox:$TRAVIS_CPU_ARCH
  # Test in local folder in parallel
  - docker run --rm -v $PWD/example_project:/src -w /src -e TOXENV -e TOX_PARAMS="-p auto" fedorapython/fedora-python-tox:$TRAVIS_CPU_ARCH
  # Test that we can install (multiple) packages from DNF as devel dependencies. Without those, cffi and pygit2 are not installable from sources.
  # This test overrides the entrypoint, so it has to be specified manually as the first command. It always runs system pip.
  - 'docker run --rm -e DNF_INSTALL="libffi-devel pkgconfig(libgit2) /usr/bin/cowsay" fedorapython/fedora-python-tox:$TRAVIS_CPU_ARCH sh -c "/run_tests.sh; pip install -I --no-deps --compile --no-binary :all: cffi pygit2~=1.5.0 && cowsay DONE"'

env:
  global:
    secure: g/Miy9Ll4KWqYxvp+F/qhrnXshr6Bdd51pSJiqioKGxJipILLyCWxpmqhQWAJjMfHD+lKzV7RjvZcxvaC5DCqKDghNb8HykQo+8HUpTClLQxgYXKuF9yHnX7kiMsQGUFp7Te6cffR+1bOFL7jtYKDmuwr5bp2MtxSrr6TJ/nKlFQLIGeWFtFIXqjjlJMvm/XqwfxAww0GCTKgJ32dYS8YLGrJw6VcR+KJ6z43ctdNqs0iVE1dYTfxMqlm4/2vPOT1AYQlj/OBMSARCPl+LkRTjHj2+oLjdJjRwdnqS/6lRbbiYrZGf/ANNPbbTndqGzqLm6SLLF7gKM9q97aTIw9OYRd3u4mbHKlU4uLcAzwLC4KCabp/wMT56j5d8ikxdsRPgFPu9XBjb7xe42ZkDWLVZ4qrYCyT3KIzA7/M4ryAQ/p8xqzaUTx/LIxEyk9kSrzHyzcqEdTOcjzh1UihTL7lg3gfy8A3PVBJUbcOhquPdHAoTwPchCKYoog/pt97Ju1rWGmaLKFvFD6ohlIQ24TH0rkZaKylchXZc4Lyk5YThHqOubqf/ujVfNLnPLYgUZsZLotHsU3LZgIjGIprgjlBpN/lxFByxBTd2n09HraUgDbJ6GECBjkf+Z4bftre86wBjoGbjzP4mkqMkfOSo2+sq6vro7HyJQmQsgzd6E8enU=

after_success:
  # Deploy images with $arch in tag to Docker hub
  - if [[ "$TRAVIS_BRANCH" == "master" && "$TRAVIS_PULL_REQUEST" == "false" ]]; then
      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD;
      docker push fedorapython/fedora-python-tox:$TRAVIS_CPU_ARCH;
    fi

jobs:
  include:
    - env: TOXENV=py36,py37,py38,py39
    - env: TOXENV=py27,py310,py35,pypy,pypy3
    # the above tests all available toxenvs run on amd64 (x86_64)
    # we run *some* toxenvs on the other architectures as well:
    - arch: arm64
      env: TOXENV=py38,py39
    - arch: ppc64le
      env: TOXENV=py37,py38
    - arch: s390x
      env: TOXENV=py35,py36,py38,pypy3

    - stage: deploy
      if: branch = master AND type != pull_request
      env: DOCKER_CLI_EXPERIMENTAL=enabled
      before_install:
        # Pull all the latest images for all architectures
        - for arch in amd64 arm64 ppc64le s390x; do
            docker pull fedorapython/fedora-python-tox:$arch;
          done
      script:
        # Create and push manifest for the :latest tag
        - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD;
          docker manifest create fedorapython/fedora-python-tox:latest
            fedorapython/fedora-python-tox:amd64
            fedorapython/fedora-python-tox:arm64
            fedorapython/fedora-python-tox:ppc64le
            fedorapython/fedora-python-tox:s390x;
          docker manifest push fedorapython/fedora-python-tox:latest;
      after_success: # nothing

    - stage: test_deployed_manifest
      if: branch = master AND type != pull_request
      env: DOCKER_CLI_EXPERIMENTAL=enabled
      before_install:
        - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD; docker pull fedorapython/fedora-python-tox:latest;
      script:
        - docker manifest inspect fedorapython/fedora-python-tox:latest | grep '"architecture":' | grep -Ez '(.*(amd64|arm64|ppc64le|s390x).*){4}'
      after_success: # nothing
